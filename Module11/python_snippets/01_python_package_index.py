# -*- coding: utf-8 -*-

# Пайтон не был бы таким востребованным без своего открытого кода.
# Интерпретируемая природа языка сильно роднит его с open source сообществом.
# Множество людей пишут скрипты и отдают их в открытый доступ.
#
# Как воспользоваться -чужим трудом- открытым кодом? с помощью пакетов пайтона!
#
# Изначально разработчик создает свой проект с помощью системы контроля версий (git, mercurial)
# и пушит на сервера, поддерживающие open source
#   https://github.com/
#   https://gitlab.com/
#   https://bitbucket.org/
# и другие. Но искать по всем серверам нужный пакет - то еще занятие. И сообщество придумало,
# как сделать единое хранилище всех пакетов.
#
# 1. Были придуманы механизмы, как упаковать свой код в пакет
#   https://docs.python.org/3.6/distutils/setupscript.html
#   https://goo.gl/a2LLea
# 2. Единым хранилищем (репозиторием) был сделан PyPI.org - Py_thon Package Index
# 3. Написаны скрипты-утилиты для получения пакетов из PyPI.org: pip, easy_install и др.
#    (про pipenv, conda - чуть позже)
#
# И теперь для того, что бы не изобретать велосипед, достаточно воспользоваться самой распространенной
# командой установки пакетов пайтона - pip (https://pip.pypa.io/en/stable/)
#
# Команда pip - это скрипт на пайтоне, менеджер пакетов. С версии 3.4 он идет вместе с python.
#
# Основние способы запуска pip:
#   pip search <ключевое слово> - найти все пакет на PyPI с этим словом
#   pip install <имя пакета> - найти и установить последнюю версию пакета
#   pip install <имя пакета>==1.2.3  - найти и установить версию пакета 1.2.3
#   pip install --upgrade <имя пакета> - обновить версию устанновленного пакета до последней
#   pip install --upgrade <имя пакета>==1.2.3 - обновить версию устанновленного пакета до указанной
#   pip uninstall <имя пакета> - удалить пакет
#   pip freeze - выдать список установленных пакетов с версиями
#   pip freeze > requirements.txt - создать файл, в котором указаны все пакеты с версиями
#   pip install -r requirements.txt - установить все пакеты указанных версий из файла
#   <путь до пайтона>\python -m pip - если в командной строке не находит pip
#
# Тонкости:
#   - если в пайтон библиотеке есть вызовы C кода, то pip будет пытаться слинковать их и нужен компилятор.
#     зачастую это долго или с компиляторами сложно в ОС и поэтому придумали формат wheel - колесо - .whl
#     Это по сути zip-архив с уже скомпиленными под конкретную ОС дополнениями.
#     Его можно скачать и установить так: pip install <путь до скачанного файла>.whl
#     Отличный проект с предкомпиленными wheels - https://www.lfd.uci.edu/~gohlke/pythonlibs/
#   - практически у всех пакетов есть зависимости: версии других пакетов,
#     на которых опробован код данного пакета. pip устанавливает сначала все зависимости, а потом сам пакет.
#     Иногда получается Ад https://goo.gl/xPpzWp - разные пакеты требуют разных зависимостей :(
#     Что делать? обновлять пакеты до определенных версий и пробовать, пробовать, пробовать
#     Автоматического решения конфликтов нет.
#
# PyCharm предоставляет обертку над pip - все можно делать в оконцах.
# Но по факту PyCharm выполняет консольные команды.
#
#
# Как искать нужные пакеты, их слишком много?!
#   - лучше всего использовать пакеты, которые вам порекомендовал авторитетный для вас источник
#   - если такого нет, то искать по ключевым словам вашей тематики
#   - если по ключевым словам не нашлось ничего годного, то проявлять общую поисковую активность:
#     спрашивать у гугла, на форумах, читать обзоры, посещать митапы и конференции.
#
#
# Как выбрать пакет из N практически одинаковых?
#   - идем на страницу исходников пакета, вероятнее всего это будет github;
#   - анализируем количество звезд проекта - выбираем проект с 10-20 и более звезд;
#   - анализируем количество форков проекта - выбираем проект с 5 и более форков;
#   - анализируем время последнего обновления проекта, то есть смотрим развивается ли он или заморожен;
#   - на версию пакета опираться не стоит, версии называют кто во что горазд
#     и 0.8 версия может быть более стабльная, чем 15.2.10.
#     Хотя есть стандарт https://www.python.org/dev/peps/pep-0440/
#
